name: build encrypted-dns-server

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            target_alias: linux-x86_64
            bin_suffix: ''
            archive_suffix: '.tar.bz2'
    defaults:
      run:
        shell: bash
    env:
      ARCHIVE_PATH: encrypted-dns_${{ github.ref_name }}_${{ matrix.target_alias }}${{ matrix.archive_suffix }}
    # Use a container with GLIBC 2.17
    container: quay.io/pypa/manylinux2014_x86_64

    steps:
      - name: Show GLIBC
        run: ldd --version

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: DNSCrypt/encrypted-dns-server
          ref: master

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 -fsSL "https://sh.rustup.rs" | sh -s -- --profile minimal --default-toolchain none -y -v
          echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH
          rustup update --no-self-update stable
          rustup target add ${{ matrix.target }}
          rustup component add rust-src
          echo "rustup_version=$(rustup --version)" >> $GITHUB_OUTPUT
          echo "cargo_version=$(cargo --version)" >> $GITHUB_OUTPUT
          echo "rustc_version=$(rustc --version)" >> $GITHUB_OUTPUT

      - name: Check Cargo availability
        run: cargo --version

      - name: Check Rustup default toolchain
        run: rustup default | grep stable

      - name: Build
        run: |
          echo 'lto = "fat"' >> Cargo.toml
          env RUSTFLAGS="-C strip=symbols" cargo build --release
          mkdir encrypted-dns
          cp target/release/encrypted-dns${{ matrix.bin_suffix }} encrypted-dns/
          cp README.md example-encrypted-dns.toml encrypted-dns/
          if [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
            tar cjpf ${ARCHIVE_PATH} encrypted-dns

      - name: Install cargo-deb and build Debian package
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          cargo install cargo-deb
          cargo deb --output=encrypted-dns_${{ github.ref_name }}_amd64.deb --no-build

      - uses: actions/upload-artifact@master
        with:
          name: encrypted-dns_${{ matrix.target_alias }}
          path: ${{ env.ARCHIVE_PATH }}

      - uses: actions/upload-artifact@master
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        with:
          name: encrypted-dns_deb-amd64
          path: encrypted-dns_${{ github.ref_name }}_amd64.deb

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/download-artifact@v3

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false
          files: |
            encrypted-dns_deb-amd64/*.deb
            encrypted-dns_linux-x86_64/*.tar.bz2
